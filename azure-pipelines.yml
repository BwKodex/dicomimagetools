# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

variables:
  package: dicom_image_tools
  srcDirectory: $(System.DefaultWorkingDirectory)/src/$(package)
  testsDirectory: $(System.DefaultWorkingDirectory)/tests
  artifactFeed: artifacts
  publishedVersion: 3.8

trigger:
  branches:
    include:
      - master
      - releases/*
  paths:
    include:
      - src/$(package)/*
      - tests/*

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python37:
      python.version: '3.7'
    Python38:
      python.version: '3.8'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install .
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines pytest-cov
    pytest --cov=$(srcDirectory) --junitxml=junit/test-results.xml --cov-report=xml --cov-report=html
  workingDirectory: $(testsDirectory)
  displayName: 'Run tests with pytest'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunTitle: 'Publish test result for Python $(python.version)'
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test-*.xml'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '**/coverage.xml'
    reportDirectory: '**/htmlcov'

- script: |
    pip install wheel
    python setup.py sdist bdist_wheel
  displayName: 'Build package'

- task: PublishPipelineArtifact@1
  displayName: Publish artifacts
  inputs: 
    targetPath: 'dist'
    artifactName: 'dist$(python.version)'
